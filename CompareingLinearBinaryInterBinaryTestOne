using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;


//Mark watch a titoral from https://www.youtube.com/watch?v=cST5TT3OFyg by IAmTimCorey to refresh on text docs

namespace ShortingLinearBinaryInterpolation
{
    class Program
    {
        static void Main(string[] args)
        {

            Stopwatch Nope = new Stopwatch();
            float Here = 0;
            float There = 0;
            float Together = 0;

            int NumberChosed = 74;

            string FileGitting = @"D:\Fall2021\Algorithms\ShortingLinearBinaryInterpolation\scores.txt";

            List<string> lineAtion = File.ReadAllLines(FileGitting).ToList();

            int Tracker = 0;

            foreach (string line in lineAtion)
            {
                //Console.WriteLine(line + "  :" + Tracker);
                Tracker = Tracker + 1;

            }
            
            int[] NumberOrig = new int[Tracker];

            int[] CorrectNumber = new int[Tracker];

            int Count = 0;

            int Keep = 0;

            int Keeps = 0;

            foreach (string line in lineAtion)
            {
                NumberOrig[Count] = Int32.Parse(line);
                CorrectNumber[Count] = 111;
                Count = Count + 1;
            }

            //for (int i = 0; i < Tracker; i++)
            //{
            //    Console.WriteLine(NumberOrig[i] + "  :" + i);
            //}

            for (int a = 0; a < Tracker; a++)
            {
                Keep = 0;
                for (int s = 0; s < Tracker; s++)
                {
                    if(s == 111 && Keep == 0)
                    {
                        CorrectNumber[s] = NumberOrig[a];
                    }
                    if(s == 111 && Keep != 0)
                    {
                        CorrectNumber[s] = Keep;
                    }
                    else if (NumberOrig[a] < CorrectNumber[s] && Keep == 0)
                    {
                        Keep = CorrectNumber[s];
                        CorrectNumber[s] = NumberOrig[a];
                    }
                    else if(Keep < CorrectNumber[s] && Keep != 0)
                    {
                        Keeps = CorrectNumber[s];
                        CorrectNumber[s] = Keep;
                        Keep = Keeps;
                        Keeps = 0;
                    }
                }
            }

            //for (int i = 0; i < Tracker; i++)
            //{
            //    Console.WriteLine(CorrectNumber[i] + "  :" + i);
            //}

            Nope.Start();
            Here = Nope.ElapsedMilliseconds;
            for (int Linear = 0; Linear < Tracker; Linear++)
            {
                if (CorrectNumber[Linear] == NumberChosed)
                {
                    There = Nope.ElapsedMilliseconds;
                    Together = There - Here;
                    Console.WriteLine("Linear Found " + CorrectNumber[Linear] + " on line " + Linear + " in " + Together + " Miliseconds");
                    //Linear = Tracker = 100;
                }
            }

            Here = Nope.ElapsedMilliseconds;
            bool Way = true;
            int MidP = (Tracker / 2);
            int LowP = 0;
            int HighP = Tracker;
            for (int g = 0; g < 15; g++)
            {
                //Console.WriteLine(MidP + " " + HighP + " " + LowP + " " + CorrectNumber[MidP] + " " + NumberChosed);
                if (CorrectNumber[MidP] == NumberChosed)
                {
                    There = Nope.ElapsedMilliseconds;
                    Together = There - Here;
                    Console.WriteLine("Binary Found " + CorrectNumber[MidP] + " on line " + MidP + " in " + Together + " Miliseconds");
                    Way = false;
                    g = 101;
                }
                else if (CorrectNumber[MidP] < NumberChosed)
                {
                    //Way = true;
                    LowP = MidP;
                    MidP = LowP + ((HighP - LowP) / 2);


                }
                else if (CorrectNumber[MidP] > NumberChosed)
                {
                    //Way = false;
                    HighP = MidP;
                    MidP = LowP + ((HighP - LowP) / 2);
                }
                else
                {
                    Console.WriteLine("Not Working");
                }
            }

            Here = Nope.ElapsedMilliseconds;
            MidP = 0 + ((((Tracker - 1) - 0) / (CorrectNumber[Tracker - 1] - CorrectNumber[0])) * (NumberChosed - CorrectNumber[0]));
            There = Nope.ElapsedMilliseconds;
            Together = There - Here;
            Console.WriteLine("Interpolation Found " + CorrectNumber[MidP] + " on line " + MidP + " in " + Together + " Miliseconds");

            //


            //Console.WriteLine("Check if Works!");

                Console.ReadKey();


        }

        
    }
}
